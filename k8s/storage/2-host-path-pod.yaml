apiVersion: v1
kind: Pod
metadata:
  name: 2-host-path
  labels:
    name: 2-host-path
spec:
  containers:
  - name: 2-host-path
    image: nginx
    resources:
      limits:
        memory: "128Mi"
        cpu: "500m"
    ports:
      - containerPort: 80
    volumeMounts:
      - mountPath: /usr/share/nginx/html
        name: log-dir
        readOnly: true
  volumes:
    - name: log-dir
      persistentVolumeClaim:
        claimName: 2-host-path

# $ kubectl apply -f 2-host-path-pv.yaml
# $ kubectl get pv
# NAME          CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                 STORAGECLASS   REASON   AGE
# 2-host-path   100Mi      RWO            Retain           Available                                   13s
# 此时 STATUS 还只是 Available，CLAIM 为空

# $ kubectl apply -f 2-host-path-pvc.yaml
# $ kubectl get pv,pvc
# NAME                           CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                 STORAGECLASS   REASON   AGE
# persistentvolume/2-host-path   100Mi      RWO            Retain           Bound    default/2-host-path                           108s
# NAME                                STATUS   VOLUME        CAPACITY   ACCESS MODES   STORAGECLASS   AGE
# persistentvolumeclaim/2-host-path   Bound    2-host-path   100Mi      RWO                           21s
# 此时添加 pvc 后，pv 的状态已经是 Bound，CLAIM 也填充上了值。在 pvc 可以看到对应的数据。

# 如果是先 apply 的 pvc，则 STATUS 为 pending
# $ kubectl apply -f 2-host-path-pvc.yaml
# NAME          STATUS    VOLUME   CAPACITY   ACCESS MODES   STORAGECLASS   AGE
# 2-host-path   Pending                                                     5s

# 最后用 pod 使用 pvc 当作 volume
# $ kubectl apply -f 2-host-path-pod.yaml